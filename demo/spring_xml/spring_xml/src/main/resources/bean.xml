<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--把对象的创建交给spring来管理-->
    <!--spring 对bean的管理细节
        1 创建bean的三种方式
        2 bean对象的作用范围
        3 bean对象的生命周期
    -->
    <!--创建bean的三种方式
        1 使用默认的构造函数：bean标签通过id和class属性，采用的就是默认构造函数，如果没有默认构造函数会无法创建
    -->
<!--    <bean id="accountService" class="com.pdd.service.impl.IAccountServiceImpl"/>-->

    <!--在一些场景下，需要倒入别人写的类-->
    <!--第二种方式：使用普通工厂中的方法创建对象(使用某个类中的方法创建对象，并存入spring容器)-->
<!--    <bean id="instanceFactory" class="com.pdd.factory.InstanceFactory"/>-->
<!--    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"/>-->

    <!--第三张方式：使用工厂中的静态方法创建对象（使用某个类的静态方法创建对象，并存入spring容器）-->
<!--    <bean id="accountService" class="com.pdd.factory.StaticFactory" factory-method="getAccountService"/>-->

    <!--bean的作用范围
        bean标签的scope属性：
            作用：指定bean的作用范围
            取值：singleton(默认)/prototype/request(web应用的请求范围)/session(web应用的会话范围)/global-session(集群环境的会话范围，全局会话)，当不是集群环境，它就是session
    -->
<!--    <bean id="accountService" class="com.pdd.service.impl.IAccountServiceImpl" scope="prototype"/>-->

    <!--bean的生命周期
       单例对象：随着容器的生命周期
            -出生：容器创建时
            -活着：容器还在
            -死亡：容器销毁
       多例对象：
   -->

    <!--spring依赖注入：降低耦合
        IOC作用：降低程序间的耦合（依赖关系）
        依赖关系的管理：交给spring来维护
        当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明。
        能够注入的数据有三类：
                - 基本类型和String
                - 其他bean类型（在配置文件中或者注解配置过的bean）
                - 复杂类型/集合类型
        注入的三种方法：
                - 1 构造函数
                - 2 set方法
                - 3 使用注解
    -->
    <!--1 构造函数注入-->
<!--    <bean id="accountService" class="com.pdd.service.impl.IAccountServiceImpl" scope="singleton"-->
<!--        init-method="init" destroy-method="destory">-->
<!--        <constructor-arg name="name" value="张三"></constructor-arg>-->
<!--        <constructor-arg name="age" value="18"></constructor-arg>-->

            <!--value:给基本类型和String类型的数据-->
            <!--ref:指定其他的bean类型数据-->
<!--        <constructor-arg name="birthday" ref="now"></constructor-arg>-->
<!--    </bean>-->
    <bean id = "now" class="java.util.Date"></bean>
    <!--2 set注入-->
<!--    <bean id="accountService" class="com.pdd.service.impl.IAccountServiceImpl" scope="singleton">-->
<!--        <property name="name" value="fangkai"></property>-->
<!--        <property name="age" value="18"></property>-->
<!--        <property name="birthday" ref="now"></property>-->
<!--    </bean>-->
    <bean id="accountService" class="com.pdd.service.impl.IAccountServiceImpl">
        <property name="myStrs">
            <array>
                <value>AA</value>
                <value>BB</value>
                <value>CC</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>AA</value>
                <value>BB</value>
                <value>CC</value>
            </list>
        </property>
        <property name="mySet">
            <list>
                <value>AA</value>
                <value>BB</value>
                <value>CC</value>
            </list>
        </property>
        <property name="myMap">
            <map>
                <entry key="k1" value="v1"/>
                <entry key="k2" value="v2"/>
            </map>
        </property>
        <property name="myProps">
            <props>
                <prop key="fuck">me</prop>
            </props>
        </property>
    </bean>
</beans>

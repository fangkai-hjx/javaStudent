<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--把对象的创建交给spring来管理-->
    <!--spring 对bean的管理细节
        1 创建bean的三种方式
        2 bean对象的作用范围
        3 bean对象的生命周期
    -->
    <!--创建bean的三种方式
        1 使用默认的构造函数：bean标签通过id和class属性，采用的就是默认构造函数，如果没有默认构造函数会无法创建
    -->
<!--    <bean id="accountService" class="com.pdd.service.impl.IAccountServiceImpl"/>-->

    <!--在一些场景下，需要倒入别人写的类-->
    <!--第二种方式：使用普通工厂中的方法创建对象(使用某个类中的方法创建对象，并存入spring容器)-->
<!--    <bean id="instanceFactory" class="com.pdd.factory.InstanceFactory"/>-->
<!--    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"/>-->

    <!--第三张方式：使用工厂中的静态方法创建对象（使用某个类的静态方法创建对象，并存入spring容器）-->
<!--    <bean id="accountService" class="com.pdd.factory.StaticFactory" factory-method="getAccountService"/>-->

    <!--bean的作用范围
        bean标签的scope属性：
            作用：指定bean的作用范围
            取值：singleton(默认)/prototype/request(web应用的请求范围)/session(web应用的会话范围)/global-session(集群环境的会话范围，全局会话)，当不是集群环境，它就是session
    -->
<!--    <bean id="accountService" class="com.pdd.service.impl.IAccountServiceImpl" scope="prototype"/>-->

    <!--bean的生命周期
       单例对象：随着容器的生命周期
            -出生：容器创建时
            -活着：容器还在
            -死亡：容器销毁
       多例对象：
   -->
    <bean id="accountService" class="com.pdd.service.impl.IAccountServiceImpl" scope="singleton"
        init-method="init" destroy-method="destory"/>
</beans>

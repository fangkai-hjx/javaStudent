<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.pdd"></context:component-scan>
    <!--开启spring开启注解aop支持-->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

    <!--配置spring的ioc，把service对象配置进来-->
<!--    <bean id="accountService" class="com.pdd.service.impl.IAccountServiceImpl"></bean>-->
    <!--spring中基于xml的aop配置
        1. 把通知的bean也交给spring来管理
        2. 使用aop:config标签表明开始AOP配置
        3. 使用aop:aspect标签表明配置切面
            id属性：切入点的唯一标识
            ref属性：指定通知类bean的id
        4. 在aop:aspect标签内部使用对应标签来配置通知类型
              aop:before：表示配置前置通知
                    method属性：用于指定Logger类中哪个方法是前置通知
                    pointcut：用于指定切入点表达式，对业务层中的哪些方法增强。

               切入点表达式写法：
                    关键字：execution（表达式）
                    表达式：访问修饰符 返回值 包名.包名.包名.类名.方法名(参数列表)
                    如：public void com.pdd.service.impl.IAccountServiceImpl.saveAccount()
                    访问修饰符可以省略：void com.pdd.service.impl.IAccountServiceImpl.saveAccount()
                    返回值可以使用通配符：表示任意返回值 * com.pdd.service.impl.IAccountServiceImpl.saveAccount()
                    包名而已使用通配符：表示任意包，但是有几级包就要写多少 * *.*.*.*.IAccountServiceImpl.saveAccount()
                    包名可以使用..表示当前包以及其子包：* *..IAccountServiceImpl.saveAccount()
                    类名和方法名都可以使用通配：* *..*.*()
                    参数列表可以直接写数据类型：
                            基本类型可以直接写名称
                            引用类型写包名.类名的方式 java.lang.String
                        可以使用通配符表示任意类型，但是必须有参数
                        可以使用..表示有无参数都可以，有参数可以是任意类型。
                    全通配写法:
                        * *..*.*(..)
                    实际开发中的通常写法：
                        切到业务层实现类下的所有方法
                            * com.pdd.service.impl.*.*(..)


    -->
<!--    <bean id="logger" class="com.pdd.utils.Logger"></bean>-->
    <!--配置AOP-->
<!--    <aop:config>-->
<!--        <aop:pointcut id="pt1" expression="execution(* com.pdd.service.impl.*.*(..))"/>-->
        <!--配置切面-->
<!--        <aop:aspect id="logAdvice" ref="logger">-->
            <!--配置通知的类型，并且建立通知方法和切入点方法的关联-->
<!--            <aop:before method="beforePrintLog" pointcut-ref="pt1"></aop:before>-->
<!--            <aop:after-returning method="returnPrintLog" pointcut-ref="pt1"></aop:after-returning>-->
<!--            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"></aop:after-throwing>-->
<!--            <aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>-->
            <!--配置切入点表达式，id为唯一标识，express属性用于指定表达式的内存
                此标签写在aop:aspect标签内部只能作为当前切面使用。
                它还可以写在apo:aspect外面，所有切片可用
            -->
<!--            <aop:pointcut id="pt1" expression="execution(* com.pdd.service.impl.*.*(..))"/>-->

            <!--配置环绕通知-->
<!--            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->
</beans>
<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<beans xmlns="http://www.springframework.org/schema/beans"-->
<!--       xmlns:context="http://www.springframework.org/schema/context"-->
<!--       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
<!--       xsi:schemaLocation="http://www.springframework.org/schema/beans-->
<!--        http://www.springframework.org/schema/beans/spring-beans.xsd-->
<!--        http://www.springframework.org/schema/context-->
<!--        http://www.springframework.org/schema/context/spring-context.xsd">-->
    <!--    -->
    <!--    <bean id="accountDao" class="com.pdd.dao.impl.IAccountDaoImpl"></bean>-->
    <!--告诉spring在创建容器时需要扫描的包，配置所需要的标签不是在beans的约束中，而是名称为context名称空间和约束中-->
<!--    <context:component-scan base-package="com.pdd"/>-->
    <!--配置Service-->
<!--    <bean id="userService" class="com.pdd.service.impl.UserServiceImpl">-->
<!--        <property name="userDao" ref="userDao"></property>-->
<!--    </bean>-->
<!--    <bean id="userDao" class="com.pdd.dao.impl.UserDaoImpl">-->
<!--        <property name="runner" ref="runner"></property>-->
<!--    </bean>-->

<!--    <bean id="runner" class="org.apache.commons.dbutils.QueryRunner">-->
<!--        <constructor-arg name="ds" ref="datasource"></constructor-arg>-->
<!--    </bean>-->
<!--    <bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
<!--        <property name="driverClass" value="com.mysql.jdbc.Driver"/>-->
<!--        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/test"/>-->
<!--        <property name="user" value="root"/>-->
<!--        <property name="password" value="root"/>-->
<!--    </bean>-->
<!--</beans>-->

